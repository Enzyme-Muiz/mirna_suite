answer1<- answer[, 1]
result<- c()
for (i in c(1: length(answer1)))
{insert= toString(answer1[i])
result<- append(result, insert)}
result})
}
shinyApp(ui= ui, server=server)
library(shiny)
ui<- fluidPage(("hello world"),
sliderInput(inputId= "num", label= "choose a number",
value =20, min= 1, max=100),
#plotOutput("hist"),
textOutput("selected_var")
textInput(inputId="num2", label="mirna input", value = "mirna"),
)
server<- function(input, output)
#{output$hist<- renderPlot({hist(rnorm(input$num))})
output$selected_var<- renderText({
yy<- ape::read.gff("C:/Users/oaona/Downloads/hsa.gff3", na.strings = c(".", "?"), GFF3 = TRUE)
my_columns <- c("seqid", "start", "end", "strand", "type")
df<- rtracklayer::readGFF("C:/Users/oaona/Downloads/hsa.gff3", columns=my_columns, tags=c("ID", "Alias", "Name"))
df1<- data.frame(df)
answer<- df1[df1$Name == input$num2, ]
answer1<- answer[, 1]
result<- c()
for (i in c(1: length(answer1)))
{insert= toString(answer1[i])
result<- append(result, insert)}
result})
}
shinyApp(ui= ui, server=server)
library(shiny)
ui<- fluidPage(("hello world"),
sliderInput(inputId= "num", label= "choose a number",
value =20, min= 1, max=100),
#plotOutput("hist"),
textOutput("selected_var")
textInput(inputId="num2", label="mirna input", value = "mirna"),
)
server<- function(input, output)
{
#output$hist<- renderPlot({hist(rnorm(input$num))})
output$selected_var<- renderText({
yy<- ape::read.gff("C:/Users/oaona/Downloads/hsa.gff3", na.strings = c(".", "?"), GFF3 = TRUE)
my_columns <- c("seqid", "start", "end", "strand", "type")
df<- rtracklayer::readGFF("C:/Users/oaona/Downloads/hsa.gff3", columns=my_columns, tags=c("ID", "Alias", "Name"))
df1<- data.frame(df)
answer<- df1[df1$Name == input$num2, ]
answer1<- answer[, 1]
result<- c()
for (i in c(1: length(answer1)))
{insert= toString(answer1[i])
result<- append(result, insert)}
result})
}
shinyApp(ui= ui, server=server)
plotOutput("hist"),
library(shiny)
ui<- fluidPage(("hello world"),
sliderInput(inputId= "num", label= "choose a number",
value =20, min= 1, max=100),
textOutput("selected_var"),
textInput(inputId="num2", label="mirna input", value = "mirna"),
)
server<- function(input, output)
{
#output$hist<- renderPlot({hist(rnorm(input$num))})
output$selected_var<- renderText({
yy<- ape::read.gff("C:/Users/oaona/Downloads/hsa.gff3", na.strings = c(".", "?"), GFF3 = TRUE)
my_columns <- c("seqid", "start", "end", "strand", "type")
df<- rtracklayer::readGFF("C:/Users/oaona/Downloads/hsa.gff3", columns=my_columns, tags=c("ID", "Alias", "Name"))
df1<- data.frame(df)
answer<- df1[df1$Name == input$num2, ]
answer1<- answer[, 1]
result<- c()
for (i in c(1: length(answer1)))
{insert= toString(answer1[i])
result<- append(result, insert)}
result})
}
shinyApp(ui= ui, server=server)
library(shiny)
ui<- fluidPage(("hello world"),
sliderInput(inputId= "num", label= "choose a number",
value =20, min= 1, max=100),
textInput(inputId="num2", label="mirna input", value = "mirna"),
textOutput("selected_var"),
)
server<- function(input, output)
{
#output$hist<- renderPlot({hist(rnorm(input$num))})
output$selected_var<- renderText({
yy<- ape::read.gff("C:/Users/oaona/Downloads/hsa.gff3", na.strings = c(".", "?"), GFF3 = TRUE)
my_columns <- c("seqid", "start", "end", "strand", "type")
df<- rtracklayer::readGFF("C:/Users/oaona/Downloads/hsa.gff3", columns=my_columns, tags=c("ID", "Alias", "Name"))
df1<- data.frame(df)
answer<- df1[df1$Name == input$num2, ]
answer1<- answer[, 1]
result<- c()
for (i in c(1: length(answer1)))
{insert= toString(answer1[i])
result<- append(result, insert)}
result})
}
shinyApp(ui= ui, server=server)
library(shiny)
ui<- fluidPage(("hello world"),
sliderInput(inputId= "num", label= "choose a number",
value =20, min= 1, max=100),
textInput(inputId="num2", label="mirna input", value = "mirna"),
textOutput("selected_var"),
)
server<- function(input, output)
{
#output$hist<- renderPlot({hist(rnorm(input$num))})
output$selected_var<- renderText({
yy<- ape::read.gff("C:/Users/oaona/Downloads/hsa.gff3", na.strings = c(".", "?"), GFF3 = TRUE)
my_columns <- c("seqid", "start", "end", "strand", "type")
df<- rtracklayer::readGFF("C:/Users/oaona/Downloads/hsa.gff3", columns=my_columns, tags=c("ID", "Alias", "Name"))
df1<- data.frame(df)
answer<- df1[df1$Name == input$num2, ]
answer1<- answer[, 1]
result<- c()
for (i in c(1: length(answer1)))
{insert= toString(answer1[i])
result<- append(result, insert)}
result})
}
shinyApp(ui= ui, server=server)
library(shiny)
ui<- fluidPage(("hello world"),
sliderInput(inputId= "num", label= "choose a number",
value =20, min= 1, max=100),
textInput(inputId="num2", label="mirna input", value = "mirna"),
textOutput("selected_var"),
)
server<- function(input, output)
{
#output$hist<- renderPlot({hist(rnorm(input$num))})
output$selected_var<- renderText({
yy<- ape::read.gff("C:/Users/oaona/Downloads/hsa.gff3", na.strings = c(".", "?"), GFF3 = TRUE)
my_columns <- c("seqid", "start", "end", "strand", "type")
df<- rtracklayer::readGFF("C:/Users/oaona/Downloads/hsa.gff3", columns=my_columns, tags=c("ID", "Alias", "Name"))
df1<- data.frame(df)
answer<- df1[df1$Name == input$num2, ]
answer1<- answer[, 1]
result<- c()
for (i in c(1: length(answer1)))
{insert= toString(answer1[i])
result<- append(result, insert)}
result})
}
shinyApp(ui= ui, server=server)
getwd()
install.packages("rlang")
install.packages("rlang")
setwd("C:/Users/oaona/apps.R")
library(BiocManager)
options(repos = BiocManager::repositories())
#install.packages("remotes")
#remotes::install_github("mw201608/msigdb")
library(shiny)
ui<- fluidPage(("hello world"),
sliderInput(inputId= "num", label= "choose a number",
value =20, min= 1, max=100),
textInput(inputId="num2", label="mirna input", value = "hsa-let-7c-3p"),
textOutput("selected_var"),
textInput('vec1', 'Enter a vector (comma delimited)', "0,1,2"),
selectInput("variable", label="select_input",choices=list('PathwayCommonsPathways'=1,'ReactomePathways'=2,'NetPath_Gene_regulation'=3,'KEGG_filtered_canonical_pathways'=4,'DisGeNet'=5,'gene_location'=6)),
textOutput("oid1"),
textOutput("oid2")
)
server<- function(input, output)
{
#output$hist<- renderPlot({hist(rnorm(input$num))})
output$selected_var<- renderText({
#yy<- ape::read.gff("./hsa.gff3", na.strings = c(".", "?"), GFF3 = TRUE)
#my_columns <- c("seqid", "start", "end", "strand", "type")
#df<- rtracklayer::readGFF("./hsa.gff3", columns=my_columns, tags=c("ID", "Alias", "Name"))
df1= read.csv("./miRNAlocation.csv")
#df1<- data.frame(df)
answer<- df1[df1$Name == input$num2, ]
answer1<- answer[, 2]
result<- c()
for (i in c(1: length(answer1)))
{insert= toString(answer1[i])
result<- append(result, insert)}
result})
output$oid1<- renderPrint({
miRNAtarget <- multiMiR::get_multimir(mirna= input$vec1, summary=TRUE)
print(unique(miRNAtarget@data[,4]))
}
)
}
shinyApp(ui= ui, server=server)
library(multiMiR)
library(BiocManager)
options(repos = BiocManager::repositories())
#install.packages("remotes")
#remotes::install_github("mw201608/msigdb")
library(shiny)
ui<- fluidPage(("hello world"),
sliderInput(inputId= "num", label= "choose a number",
value =20, min= 1, max=100),
textInput(inputId="num2", label="mirna input", value = "hsa-let-7c-3p"),
textOutput("selected_var"),
textInput('vec1', 'Enter a vector (comma delimited)', "hsa-miR-4665-5p"),
selectInput("variable", label="select_input",choices=list('PathwayCommonsPathways'=1,'ReactomePathways'=2,'NetPath_Gene_regulation'=3,'KEGG_filtered_canonical_pathways'=4,'DisGeNet'=5,'gene_location'=6)),
textOutput("oid1"),
textOutput("oid2")
)
server<- function(input, output)
{
#output$hist<- renderPlot({hist(rnorm(input$num))})
output$selected_var<- renderText({
#yy<- ape::read.gff("./hsa.gff3", na.strings = c(".", "?"), GFF3 = TRUE)
#my_columns <- c("seqid", "start", "end", "strand", "type")
#df<- rtracklayer::readGFF("./hsa.gff3", columns=my_columns, tags=c("ID", "Alias", "Name"))
df1= read.csv("./miRNAlocation.csv")
#df1<- data.frame(df)
answer<- df1[df1$Name == input$num2, ]
answer1<- answer[, 2]
result<- c()
for (i in c(1: length(answer1)))
{insert= toString(answer1[i])
result<- append(result, insert)}
result})
output$oid1<- renderPrint({
miRNAtarget <- multiMiR::get_multimir(mirna= input$vec1, summary=TRUE)
print(unique(miRNAtarget@data[,4]))
}
)
}
shinyApp(ui= ui, server=server)
library(BiocManager)
options(repos = BiocManager::repositories())
#install.packages("remotes")
#remotes::install_github("mw201608/msigdb")
library(shiny)
ui<- fluidPage(("hello world"),
sliderInput(inputId= "num", label= "choose a number",
value =20, min= 1, max=100),
textInput(inputId="num2", label="mirna input", value = "hsa-let-7c-3p"),
textOutput("selected_var"),
textInput('vec1', 'Enter a vector (comma delimited)', "hsa-miR-4665-5p"),
selectInput("variable", label="select_input",choices=list('PathwayCommonsPathways'=1,'ReactomePathways'=2,'NetPath_Gene_regulation'=3,'KEGG_filtered_canonical_pathways'=4,'DisGeNet'=5,'gene_location'=6)),
textOutput("oid1"),
textOutput("oid2")
)
server<- function(input, output)
{
#output$hist<- renderPlot({hist(rnorm(input$num))})
output$selected_var<- renderText({
#yy<- ape::read.gff("./hsa.gff3", na.strings = c(".", "?"), GFF3 = TRUE)
#my_columns <- c("seqid", "start", "end", "strand", "type")
#df<- rtracklayer::readGFF("./hsa.gff3", columns=my_columns, tags=c("ID", "Alias", "Name"))
df1= read.csv("./miRNAlocation.csv")
#df1<- data.frame(df)
answer<- df1[df1$Name == input$num2, ]
answer1<- answer[, 2]
result<- c()
for (i in c(1: length(answer1)))
{insert= toString(answer1[i])
result<- append(result, insert)}
result})
output$oid1<- renderPrint({
miRNAtarget <- multiMiR::get_multimir(mirna= input$vec1, summary=FALSE)
print(unique(miRNAtarget@data[,4])[c(1:15)])
}
)
}
shinyApp(ui= ui, server=server)
library(BiocManager)
options(repos = BiocManager::repositories())
#install.packages("remotes")
#remotes::install_github("mw201608/msigdb")
library(shiny)
ui<- fluidPage(("hello world"),
sliderInput(inputId= "num", label= "choose a number",
value =20, min= 1, max=100),
textInput(inputId="num2", label="mirna input", value = "hsa-let-7c-3p"),
textOutput("selected_var"),
textInput('vec1', 'Enter a vector (comma delimited)', "hsa-miR-4665-5p"),
selectInput("variable", label="select_input",choices=list('PathwayCommonsPathways'=1,'ReactomePathways'=2,'NetPath_Gene_regulation'=3,'KEGG_filtered_canonical_pathways'=4,'DisGeNet'=5,'gene_location'=6)),
textOutput("oid1"),
textOutput("oid2")
)
server<- function(input, output)
{
#output$hist<- renderPlot({hist(rnorm(input$num))})
output$selected_var<- renderText({
#yy<- ape::read.gff("./hsa.gff3", na.strings = c(".", "?"), GFF3 = TRUE)
#my_columns <- c("seqid", "start", "end", "strand", "type")
#df<- rtracklayer::readGFF("./hsa.gff3", columns=my_columns, tags=c("ID", "Alias", "Name"))
df1= read.csv("./miRNAlocation.csv")
#df1<- data.frame(df)
answer<- df1[df1$Name == input$num2, ]
answer1<- answer[, 2]
result<- c()
for (i in c(1: length(answer1)))
{insert= toString(answer1[i])
result<- append(result, insert)}
result})
output$oid1<- renderPrint({
miRNAtarget <- multiMiR::get_multimir(mirna= input$vec1, summary=FALSE)
print(unique(miRNAtarget@data[,4])[c(1:15)])
}
)
}
shinyApp(ui= ui, server=server)
library(BiocManager)
options(repos = BiocManager::repositories())
#install.packages("remotes")
#remotes::install_github("mw201608/msigdb")
library(shiny)
ui<- fluidPage(("hello world"),
sliderInput(inputId= "num", label= "choose a number",
value =20, min= 1, max=100),
textInput(inputId="num2", label="mirna input", value = "hsa-let-7c-3p"),
textOutput("selected_var"),
textInput('vec1', 'Enter a vector (comma delimited)', "hsa-miR-4665-5p"),
actionButton(inputId = "go", label= "mirna_target"),
selectInput("variable", label="select_input",choices=list('PathwayCommonsPathways'=1,'ReactomePathways'=2,'NetPath_Gene_regulation'=3,'KEGG_filtered_canonical_pathways'=4,'DisGeNet'=5,'gene_location'=6)),
textOutput("oid1"),
textOutput("oid2")
)
server<- function(input, output)
{
#output$hist<- renderPlot({hist(rnorm(input$num))})
output$selected_var<- renderText({
#yy<- ape::read.gff("./hsa.gff3", na.strings = c(".", "?"), GFF3 = TRUE)
#my_columns <- c("seqid", "start", "end", "strand", "type")
#df<- rtracklayer::readGFF("./hsa.gff3", columns=my_columns, tags=c("ID", "Alias", "Name"))
df1= read.csv("./miRNAlocation.csv")
#df1<- data.frame(df)
answer<- df1[df1$Name == input$num2, ]
answer1<- answer[, 2]
result<- c()
for (i in c(1: length(answer1)))
{insert= toString(answer1[i])
result<- append(result, insert)}
result})
data= eventReactive(input$go, {miRNAtarget <- multiMiR::get_multimir(mirna= input$vec1, summary=FALSE)
(unique(miRNAtarget@data[,4])[c(1:input$num)])
})
output$oid1<- renderPrint({
print(data())
}
)
}
shinyApp(ui= ui, server=server)
library(shiny)
ui<- fluidPage(tag$h1("hello world"),
sliderInput(inputId= "num", label= "choose a number",
value =20, min= 1, max=100),
textInput(inputId="num2", label="mirna input", value = "hsa-let-7c-3p"),
textOutput("selected_var"),
textInput('vec1', 'Enter a vector (comma delimited)', "hsa-miR-4665-5p"),
actionButton(inputId = "go", label= "mirna_target"),
selectInput("variable", label="select_input",choices=list('PathwayCommonsPathways'=1,'ReactomePathways'=2,'NetPath_Gene_regulation'=3,'KEGG_filtered_canonical_pathways'=4,'DisGeNet'=5,'gene_location'=6)),
textOutput("oid1"),
textOutput("oid2")
)
server<- function(input, output)
{
#output$hist<- renderPlot({hist(rnorm(input$num))})
output$selected_var<- renderText({
#yy<- ape::read.gff("./hsa.gff3", na.strings = c(".", "?"), GFF3 = TRUE)
#my_columns <- c("seqid", "start", "end", "strand", "type")
#df<- rtracklayer::readGFF("./hsa.gff3", columns=my_columns, tags=c("ID", "Alias", "Name"))
df1= read.csv("./miRNAlocation.csv")
#df1<- data.frame(df)
answer<- df1[df1$Name == input$num2, ]
answer1<- answer[, 2]
result<- c()
for (i in c(1: length(answer1)))
{insert= toString(answer1[i])
result<- append(result, insert)}
result})
data= eventReactive(input$go, {miRNAtarget <- multiMiR::get_multimir(mirna= input$vec1, summary=FALSE)
(unique(miRNAtarget@data[,4])[c(1:input$num)])
})
output$oid1<- renderPrint({
print(data())
}
)
}
shinyApp(ui= ui, server=server)
library(BiocManager)
options(repos = BiocManager::repositories())
#install.packages("remotes")
#remotes::install_github("mw201608/msigdb")
library(shiny)
ui<- fluidPage(tags$h1("hello world"),
sliderInput(inputId= "num", label= "choose a number",
value =20, min= 1, max=100),
textInput(inputId="num2", label="mirna input", value = "hsa-let-7c-3p"),
textOutput("selected_var"),
textInput('vec1', 'Enter a vector (comma delimited)', "hsa-miR-4665-5p"),
actionButton(inputId = "go", label= "mirna_target"),
selectInput("variable", label="select_input",choices=list('PathwayCommonsPathways'=1,'ReactomePathways'=2,'NetPath_Gene_regulation'=3,'KEGG_filtered_canonical_pathways'=4,'DisGeNet'=5,'gene_location'=6)),
textOutput("oid1"),
textOutput("oid2")
)
server<- function(input, output)
{
#output$hist<- renderPlot({hist(rnorm(input$num))})
output$selected_var<- renderText({
#yy<- ape::read.gff("./hsa.gff3", na.strings = c(".", "?"), GFF3 = TRUE)
#my_columns <- c("seqid", "start", "end", "strand", "type")
#df<- rtracklayer::readGFF("./hsa.gff3", columns=my_columns, tags=c("ID", "Alias", "Name"))
df1= read.csv("./miRNAlocation.csv")
#df1<- data.frame(df)
answer<- df1[df1$Name == input$num2, ]
answer1<- answer[, 2]
result<- c()
for (i in c(1: length(answer1)))
{insert= toString(answer1[i])
result<- append(result, insert)}
result})
data= eventReactive(input$go, {miRNAtarget <- multiMiR::get_multimir(mirna= input$vec1, summary=FALSE)
(unique(miRNAtarget@data[,4])[c(1:input$num)])
})
output$oid1<- renderPrint({
print(data())
}
)
}
shinyApp(ui= ui, server=server)
library(BiocManager)
options(repos = BiocManager::repositories())
#install.packages("remotes")
#remotes::install_github("mw201608/msigdb")
library(shiny)
ui<- fluidPage(tags$h1(tags$code("hello world"),
sliderInput(inputId= "num", label= "choose a number",
value =20, min= 1, max=100),
textInput(inputId="num2", label="mirna input", value = "hsa-let-7c-3p"),
textOutput("selected_var"),
textInput('vec1', 'Enter a vector (comma delimited)', "hsa-miR-4665-5p"),
actionButton(inputId = "go", label= "mirna_target"),
selectInput("variable", label="select_input",choices=list('PathwayCommonsPathways'=1,'ReactomePathways'=2,'NetPath_Gene_regulation'=3,'KEGG_filtered_canonical_pathways'=4,'DisGeNet'=5,'gene_location'=6)),
textOutput("oid1"),
textOutput("oid2")
)
server<- function(input, output)
{
#output$hist<- renderPlot({hist(rnorm(input$num))})
output$selected_var<- renderText({
#yy<- ape::read.gff("./hsa.gff3", na.strings = c(".", "?"), GFF3 = TRUE)
#my_columns <- c("seqid", "start", "end", "strand", "type")
#df<- rtracklayer::readGFF("./hsa.gff3", columns=my_columns, tags=c("ID", "Alias", "Name"))
df1= read.csv("./miRNAlocation.csv")
#df1<- data.frame(df)
answer<- df1[df1$Name == input$num2, ]
answer1<- answer[, 2]
result<- c()
for (i in c(1: length(answer1)))
{insert= toString(answer1[i])
result<- append(result, insert)}
result})
data= eventReactive(input$go, {miRNAtarget <- multiMiR::get_multimir(mirna= input$vec1, summary=FALSE)
(unique(miRNAtarget@data[,4])[c(1:input$num)])
})
output$oid1<- renderPrint({
print(data())
}
)
}
shinyApp(ui= ui, server=server)
library(BiocManager)
options(repos = BiocManager::repositories())
#install.packages("remotes")
#remotes::install_github("mw201608/msigdb")
library(shiny)
ui<- fluidPage(h1("hello world"),
sliderInput(inputId= "num", label= "choose a number",
value =20, min= 1, max=100),
textInput(inputId="num2", label="mirna input", value = "hsa-let-7c-3p"),
textOutput("selected_var"),
textInput('vec1', 'Enter a vector (comma delimited)', "hsa-miR-4665-5p"),
actionButton(inputId = "go", label= "mirna_target"),
selectInput("variable", label="select_input",choices=list('PathwayCommonsPathways'=1,'ReactomePathways'=2,'NetPath_Gene_regulation'=3,'KEGG_filtered_canonical_pathways'=4,'DisGeNet'=5,'gene_location'=6)),
textOutput("oid1"),
textOutput("oid2")
)
server<- function(input, output)
{
#output$hist<- renderPlot({hist(rnorm(input$num))})
output$selected_var<- renderText({
#yy<- ape::read.gff("./hsa.gff3", na.strings = c(".", "?"), GFF3 = TRUE)
#my_columns <- c("seqid", "start", "end", "strand", "type")
#df<- rtracklayer::readGFF("./hsa.gff3", columns=my_columns, tags=c("ID", "Alias", "Name"))
df1= read.csv("./miRNAlocation.csv")
#df1<- data.frame(df)
answer<- df1[df1$Name == input$num2, ]
answer1<- answer[, 2]
result<- c()
for (i in c(1: length(answer1)))
{insert= toString(answer1[i])
result<- append(result, insert)}
result})
data= eventReactive(input$go, {miRNAtarget <- multiMiR::get_multimir(mirna= input$vec1, summary=FALSE)
(unique(miRNAtarget@data[,4])[c(1:input$num)])
})
output$oid1<- renderPrint({
print(data())
}
)
}
shinyApp(ui= ui, server=server)
