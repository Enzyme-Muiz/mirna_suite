plotOutput("hist"))
server<- function(input, output){
output$hist<- renderPlot({hist(rnorm(input$num))})
}
shinyApp(ui= ui, server=server)
plotOutput("hist")
library(shiny)
ui<- fluidPage(("hello world"),
sliderInput(inputId= "num", label= "choose a number",
value =20, min= 1, max=100),
plotOutput("hist"))
server<- function(input, output){
output$hist<- renderPlot({hist(rnorm(input$num))})
}
shinyApp(ui= ui, server=server)
runApp('C:/Users/oaona')
runApp('C:/Users/oaona')
runApp('C:/Users/oaona')
library(shiny)
ui<- fluidPage(("hello world"),
sliderInput(inputId= "num", label= "choose a number",
value =20, min= 1, max=100),
plotOutput("hist"))
server<- function(input, output){
output$hist<- renderPlot({hist(rnorm(input$num))})
}
shinyApp(ui= ui, server=server)
runApp('C:/Users/oaona')
library(shiny)
ui<- fluidPage(("hello world"),
sliderInput(inputId= "num", label= "choose a number",
value =20, min= 1, max=100),
plotOutput("hist"))
server<- function(input, output){
output$hist<- renderPlot({hist(rnorm(input$num))})
}
shinyApp(ui= ui, server=server)
install.packages('rsconnect')
rsconnect::setAccountInfo(name='rajimu',
token='43EFC122B0BA5E1D8E6D8C3520880F14',
secret='r0Q80ufJZpw7w/29yW7yw8tQ6Yq3f9/YTtLQopIX')
C:\Users\oaona\app.R
library(rsconnect)
rsconnect::deployApp('C:\Users\oaona\app.R')
library(rsconnect)
rsconnect::deployApp('C:/Users/oaona/app.R')
devtools::install_github("rstudio/shinyapps")
devtools::install_github('rstudio/shinyapps')
remotes::install_github('rstudio/shinyapps')
remotes::install_github('shinyapps')
devtools::install_github()
library(shiny)
ui<- fluidPage(("hello world"),
sliderInput(inputId= "num", label= "choose a number",
value =20, min= 1, max=100),
plotOutput("hist"),
textInput(inputId, label, value = ""))
server<- function(input, output){
output$hist<- renderPlot({hist(rnorm(input$num))})
}
library(shiny)
ui<- fluidPage(("hello world"),
sliderInput(inputId= "num", label= "choose a number",
value =20, min= 1, max=100),
plotOutput("hist"),
)
server<- function(input, output){
output$hist<- renderPlot({hist(rnorm(input$num))})
}
shinyApp(ui= ui, server=server)
library(shiny)
ui<- fluidPage(("hello world"),
sliderInput(inputId= "num", label= "choose a number",
value =20, min= 1, max=100),
plotOutput("hist"),
textInput(inputId="123", label="mirna input", value = "mirna"))
server<- function(input, output){
output$hist<- renderPlot({hist(rnorm(input$num))})
}
shinyApp(ui= ui, server=server)
library(shiny)
ui<- fluidPage(("hello world"),
sliderInput(inputId= "num", label= "choose a number",
value =20, min= 1, max=100),
plotOutput("hist"),
textInput(inputId="123", label="mirna input", value = "mirna"),
textOutput("selected_var")
)
server<- function(input, output){
output$hist<- renderPlot({hist(rnorm(input$num))})
#output$selected_var<- renderPlot({hist(rnorm(input$num))})
}
shinyApp(ui= ui, server=server)
library(shiny)
ui<- fluidPage(("hello world"),
sliderInput(inputId= "num", label= "choose a number",
value =20, min= 1, max=100),
plotOutput("hist"),
textInput(inputId="123", label="mirna input", value = "mirna"),
textOutput("selected_var")
)
server<- function(input, output){
output$hist<- renderPlot({hist(rnorm(input$num))})
hist(rnorm(input$num))
#output$selected_var<- renderText({})
}
shinyApp(ui= ui, server=server)
library(shiny)
ui<- fluidPage(("hello world"),
sliderInput(inputId= "num", label= "choose a number",
value =20, min= 1, max=100),
plotOutput("hist"),
textInput(inputId="123", label="mirna input", value = "mirna"),
textOutput("selected_var")
)
server<- function(input, output){
output$hist<- renderPlot({hist(rnorm(input$num))})
#hist(rnorm(input$num))
#output$selected_var<- renderText({})
}
shinyApp(ui= ui, server=server)
library(shiny)
ui<- fluidPage(("hello world"),
sliderInput(inputId= "num", label= "choose a number",
value =20, min= 1, max=100),
plotOutput("hist"),
textInput(inputId="123", label="mirna input", value = "mirna"),
textOutput("selected_var")
)
server<- function(input, output){
output$hist<- renderPlot({hist(rnorm(input$num))})
#hist(rnorm(input$num))
output$selected_var<- renderText({
yy<- ape::read.gff("C:/Users/oaona/Downloads/hsa.gff3", na.strings = c(".", "?"), GFF3 = TRUE)
my_columns <- c("seqid", "start", "end", "strand", "type")
df<- rtracklayer::readGFF("C:/Users/oaona/Downloads/hsa.gff3", columns=my_columns, tags=c("ID", "Alias", "Name"))
df1<- data.frame(df)
answer<- df1[df1$Name == input$123, ]
answer1<- answer[, 1]
result<- c()
for (i in c(1: length(answer1)))
{insert= toString(answer1[i])
result<- append(result, insert)}
result})
}
shinyApp(ui= ui, server=server)
install.packages("ape")
library(shiny)
ui<- fluidPage(("hello world"),
sliderInput(inputId= "num", label= "choose a number",
value =20, min= 1, max=100),
plotOutput("hist"),
textInput(inputId="num2", label="mirna input", value = "mirna"),
textOutput("selected_var")
)
server<- function(input, output){
output$hist<- renderPlot({hist(rnorm(input$num))})
output$selected_var<- renderText({
yy<- ape::read.gff("C:/Users/oaona/Downloads/hsa.gff3", na.strings = c(".", "?"), GFF3 = TRUE)
my_columns <- c("seqid", "start", "end", "strand", "type")
df<- rtracklayer::readGFF("C:/Users/oaona/Downloads/hsa.gff3", columns=my_columns, tags=c("ID", "Alias", "Name"))
df1<- data.frame(df)
answer<- df1[df1$Name == input$num2, ]
answer1<- answer[, 1]
result<- c()
for (i in c(1: length(answer1)))
{insert= toString(answer1[i])
result<- append(result, insert)}
result})
}
shinyApp(ui= ui, server=server)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("rtracklayer")
library(shiny)
ui<- fluidPage(("hello world"),
sliderInput(inputId= "num", label= "choose a number",
value =20, min= 1, max=100),
plotOutput("hist"),
textInput(inputId="num2", label="mirna input", value = "mirna"),
textOutput("selected_var")
)
server<- function(input, output){
output$hist<- renderPlot({hist(rnorm(input$num))})
output$selected_var<- renderText({
yy<- ape::read.gff("C:/Users/oaona/Downloads/hsa.gff3", na.strings = c(".", "?"), GFF3 = TRUE)
my_columns <- c("seqid", "start", "end", "strand", "type")
df<- rtracklayer::readGFF("C:/Users/oaona/Downloads/hsa.gff3", columns=my_columns, tags=c("ID", "Alias", "Name"))
df1<- data.frame(df)
answer<- df1[df1$Name == input$num2, ]
answer1<- answer[, 1]
result<- c()
for (i in c(1: length(answer1)))
{insert= toString(answer1[i])
result<- append(result, insert)}
result})
}
shinyApp(ui= ui, server=server)
library(shiny)
ui<- fluidPage(("hello world"),
sliderInput(inputId= "num", label= "choose a number",
value =20, min= 1, max=100),
#plotOutput("hist"),
textOutput("selected_var")
textInput(inputId="num2", label="mirna input", value = "mirna"),
)
server<- function(input, output)
#{output$hist<- renderPlot({hist(rnorm(input$num))})
output$selected_var<- renderText({
yy<- ape::read.gff("C:/Users/oaona/Downloads/hsa.gff3", na.strings = c(".", "?"), GFF3 = TRUE)
my_columns <- c("seqid", "start", "end", "strand", "type")
df<- rtracklayer::readGFF("C:/Users/oaona/Downloads/hsa.gff3", columns=my_columns, tags=c("ID", "Alias", "Name"))
df1<- data.frame(df)
answer<- df1[df1$Name == input$num2, ]
answer1<- answer[, 1]
result<- c()
for (i in c(1: length(answer1)))
{insert= toString(answer1[i])
result<- append(result, insert)}
result})
}
shinyApp(ui= ui, server=server)
library(shiny)
ui<- fluidPage(("hello world"),
sliderInput(inputId= "num", label= "choose a number",
value =20, min= 1, max=100),
#plotOutput("hist"),
textOutput("selected_var")
textInput(inputId="num2", label="mirna input", value = "mirna"),
)
server<- function(input, output)
{
#output$hist<- renderPlot({hist(rnorm(input$num))})
output$selected_var<- renderText({
yy<- ape::read.gff("C:/Users/oaona/Downloads/hsa.gff3", na.strings = c(".", "?"), GFF3 = TRUE)
my_columns <- c("seqid", "start", "end", "strand", "type")
df<- rtracklayer::readGFF("C:/Users/oaona/Downloads/hsa.gff3", columns=my_columns, tags=c("ID", "Alias", "Name"))
df1<- data.frame(df)
answer<- df1[df1$Name == input$num2, ]
answer1<- answer[, 1]
result<- c()
for (i in c(1: length(answer1)))
{insert= toString(answer1[i])
result<- append(result, insert)}
result})
}
shinyApp(ui= ui, server=server)
plotOutput("hist"),
library(shiny)
ui<- fluidPage(("hello world"),
sliderInput(inputId= "num", label= "choose a number",
value =20, min= 1, max=100),
textOutput("selected_var"),
textInput(inputId="num2", label="mirna input", value = "mirna"),
)
server<- function(input, output)
{
#output$hist<- renderPlot({hist(rnorm(input$num))})
output$selected_var<- renderText({
yy<- ape::read.gff("C:/Users/oaona/Downloads/hsa.gff3", na.strings = c(".", "?"), GFF3 = TRUE)
my_columns <- c("seqid", "start", "end", "strand", "type")
df<- rtracklayer::readGFF("C:/Users/oaona/Downloads/hsa.gff3", columns=my_columns, tags=c("ID", "Alias", "Name"))
df1<- data.frame(df)
answer<- df1[df1$Name == input$num2, ]
answer1<- answer[, 1]
result<- c()
for (i in c(1: length(answer1)))
{insert= toString(answer1[i])
result<- append(result, insert)}
result})
}
shinyApp(ui= ui, server=server)
library(shiny)
ui<- fluidPage(("hello world"),
sliderInput(inputId= "num", label= "choose a number",
value =20, min= 1, max=100),
textInput(inputId="num2", label="mirna input", value = "mirna"),
textOutput("selected_var"),
)
server<- function(input, output)
{
#output$hist<- renderPlot({hist(rnorm(input$num))})
output$selected_var<- renderText({
yy<- ape::read.gff("C:/Users/oaona/Downloads/hsa.gff3", na.strings = c(".", "?"), GFF3 = TRUE)
my_columns <- c("seqid", "start", "end", "strand", "type")
df<- rtracklayer::readGFF("C:/Users/oaona/Downloads/hsa.gff3", columns=my_columns, tags=c("ID", "Alias", "Name"))
df1<- data.frame(df)
answer<- df1[df1$Name == input$num2, ]
answer1<- answer[, 1]
result<- c()
for (i in c(1: length(answer1)))
{insert= toString(answer1[i])
result<- append(result, insert)}
result})
}
shinyApp(ui= ui, server=server)
library(shiny)
ui<- fluidPage(("hello world"),
sliderInput(inputId= "num", label= "choose a number",
value =20, min= 1, max=100),
textInput(inputId="num2", label="mirna input", value = "mirna"),
textOutput("selected_var"),
)
server<- function(input, output)
{
#output$hist<- renderPlot({hist(rnorm(input$num))})
output$selected_var<- renderText({
yy<- ape::read.gff("C:/Users/oaona/Downloads/hsa.gff3", na.strings = c(".", "?"), GFF3 = TRUE)
my_columns <- c("seqid", "start", "end", "strand", "type")
df<- rtracklayer::readGFF("C:/Users/oaona/Downloads/hsa.gff3", columns=my_columns, tags=c("ID", "Alias", "Name"))
df1<- data.frame(df)
answer<- df1[df1$Name == input$num2, ]
answer1<- answer[, 1]
result<- c()
for (i in c(1: length(answer1)))
{insert= toString(answer1[i])
result<- append(result, insert)}
result})
}
shinyApp(ui= ui, server=server)
library(shiny)
ui<- fluidPage(("hello world"),
sliderInput(inputId= "num", label= "choose a number",
value =20, min= 1, max=100),
textInput(inputId="num2", label="mirna input", value = "mirna"),
textOutput("selected_var"),
)
server<- function(input, output)
{
#output$hist<- renderPlot({hist(rnorm(input$num))})
output$selected_var<- renderText({
yy<- ape::read.gff("C:/Users/oaona/Downloads/hsa.gff3", na.strings = c(".", "?"), GFF3 = TRUE)
my_columns <- c("seqid", "start", "end", "strand", "type")
df<- rtracklayer::readGFF("C:/Users/oaona/Downloads/hsa.gff3", columns=my_columns, tags=c("ID", "Alias", "Name"))
df1<- data.frame(df)
answer<- df1[df1$Name == input$num2, ]
answer1<- answer[, 1]
result<- c()
for (i in c(1: length(answer1)))
{insert= toString(answer1[i])
result<- append(result, insert)}
result})
}
shinyApp(ui= ui, server=server)
getwd()
shiny::runApp('C:/Users/oaona/apps2')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
library(ggplot2)
library(datasets)
data(iris)
dim(iris)
ggplot(data=iris)
colnames(iris)
ggplot(data=iris, aes(y=Sepal.Length, x= Petal.Length ))
ggplot(data=iris, aes(y=Sepal.Length, x= Petal.Length ))+geom_point()
ggplot(data=iris, aes(y=Sepal.Length, x= Petal.Length, col= Species ))+geom_point()
ggplot(data=iris, aes(y=Sepal.Length, x= Petal.Length, shape= Species ))+geom_point()
ggplot(data=iris, aes(y=Sepal.Length, x= Petal.Length, shape= Species, col= Species ))+geom_point()
view(iris)
View(iris)
library(dplyr)
iris %>% select(c(-4)) -> new_iris
View(new_iris)
ggplot(data=iris, aes(y=Sepal.Length))+geom_histogram()
ggplot(data=iris, aes(x=Sepal.Length))+geom_histogram()
ggplot(data=iris, aes(x=Sepal.Length))+geom_histogram(bins=100)
ggplot(data=iris, aes(x=Sepal.Length))+geom_histogram(bins=20)
ggplot(data=iris, aes(x=Sepal.Length))+geom_histogram(bins=20, fill= "palegreen4")
ggplot(data=iris, aes(x=Sepal.Length))+geom_histogram(bins=20, fill= "palegreen4", col="green")
ggplot(data=iris, aes(x=Sepal.Length, fill= "Species"))+geom_histogram(bins=20)
ggplot(data=iris, aes(x=Sepal.Length, fill= Species))+geom_histogram(bins=20)
ggplot(data=iris, aes(x=Sepal.Length, fill= Species))+geom_histogram(bins=20, position= "fill")
ggplot(data=iris, aes(x=Species))+geom_bar()
View(iris)
ggplot(data=iris, aes(x=Species))+geom_bar(fill= "green", col="blue")
ggplot(data=iris, aes(x=Sepal.Length, fill= Species))+geom_freqpoly(bins=20, position= "fill")
ggplot(data=iris, aes(x=Sepal.Length, fill= Species))+geom_freqpoly()
ggplot(data=iris, aes(x=Sepal.Length))+geom_freqpoly(fill="green")
ggplot(data=iris, aes(x=Sepal.Length))+geom_freqpoly()
ggplot(data=iris, aes(x=Sepal.Length))+geom_freqpoly(30)
ggplot(data=iris, aes(x=Sepal.Length))+geom_freqpoly()
ggplot(data=iris, aes(x=Sepal.Length))+geom_freqpoly(bins=60)
ggplot(data=iris, aes(x=Sepal.Length))+geom_freqpoly(bins=20)
ggplot(data=iris, aes(x=Sepal.Length))+geom_freqpoly(bins=30)
ggplot(data=iris, aes(x=Sepal.Length))+geom_freqpoly(bins=40)
ggplot(data=iris, aes(x=Sepal.Length, col= "Species"))+geom_freqpoly(bins=40)
ggplot(data=iris, aes(x=Sepal.Length, col= Species))+geom_freqpoly(bins=40)
ggplot(data=iris, aes(x=Sepal.Length, col= Species))+geom_freqpoly(bins=50)
ggplot(data=iris, aes(x=Sepal.Length, col= Species))+geom_freqpoly(bins=10)
ggplot(data=iris, aes(x=Species, y= Sepal.Length))+geom_boxplot()
ggplot(data=iris, aes(x=Species, y= Sepal.Length))+geom_boxplot()
ggplot(data=iris, aes(x=Sepal.Length, col= Species))+geom_freqpoly(bins=10)
ggplot(data=iris, aes(x=Sepal.Length, col= Species))+geom_freqpoly(filled.contour= "green")
ggplot(data=iris, aes(x=Sepal.Length, col= Species))+geom_freqpoly()
ggplot(data=iris, aes(x=Petal.Length, y= Sepal.Length))+geom_smooth(col= "palegreen4")
ggplot(data=iris, aes(x=Petal.Length, y= Sepal.Length, col= Species))+geom_smooth(se= F)
ggplot(data=iris, aes(x=Petal.Length, y= Sepal.Length, col= Species))+geom_point+geom_smooth(method= "lm", se= F)
ggplot(data=iris, aes(x=Petal.Length, y= Sepal.Length, col= Species))+geom_point()+geom_smooth(method= "lm", se= F)
ggplot(data=iris, aes(x=Petal.Length, y= Sepal.Length, col= Species))+geom_point()+geom_smooth(method= "lm", se= F)+facet_grid(~Species)
ggplot(data=iris, aes(x=Petal.Length, y= Sepal.Length))+geom_smooth(col= "palegreen4")-> obj1
ggplot(data=iris, aes(x=Petal.Length, y= Sepal.Length))+geom_smooth(col= "palegreen4")
obj1+lab(title="ok", x= "p.l")
obj1+labs(title="ok", x= "p.l")
obj1+labs(title="ok", x= "p.l", fill=Species)
obj1+labs(title="ok", x= "p.l")-> obj2
obj2+theme(panel.background = element_rect(fill= "palegreen4"))
obj2+theme(panel.background = element_rect(fill= "lightblue"))
obj2+theme(panel.background = element_blank(fill= "lightblue"))
obj2+theme(panel.background = element_grob(fill= "lightblue"))
obj2+theme(panel.background = element_rect(fill= "lightblue"))
obj2+theme(panel.background = element_rect(fill= "lightblue"))-> obj3
obj3+ theme(plot.title = element_text(hjust=5, face="bold", colour= "brown"))
obj3+ theme(plot.title = element_text(hjust=5, face="bold", colour= "cadetblue"))
obj3+ theme(plot.title = element_text(hjust=0.5, face="bold", colour= "cadetblue"))
obj3+ theme(plot.title = element_text(hjust=0.5, face="bold", colour= "cadetblue"))->obj4
obj4+scale_y_continuous(labels= centimeters)
obj4+scale_y_continuous(labels= centimetre)
obj4+scale_y_continuous(labels= centimeter)
obj4+scale_y_continuous(labels= cm)
shiny::runApp('C:/Users/oaona/apps2')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
shiny::runApp('C:/Users/oaona/apps2')
runApp('C:/Users/oaona/apps2')
runApp('C:/Users/oaona/apps2')
runApp('C:/Users/oaona/apps2')
"str"+"slm"
runApp('C:/Users/oaona/apps2')
runApp('C:/Users/oaona/apps2')
v<- c(1,3)
v<- append(v, 5)
v
runApp('C:/Users/oaona/apps2')
runApp('C:/Users/oaona/apps2')
runApp('C:/Users/oaona/apps2')
runApp('C:/Users/oaona/apps2')
runApp('C:/Users/oaona/apps')
runApp('C:/Users/oaona/apps')
setwd("C:/Users/oaona/apps")
runApp()
v<- c(1,3)
v1<- c(4,5)
v<- append(v, v1)
v
runApp()
result
runApp()
runApp('C:/Users/oaona/apps2')
runApp('C:/Users/oaona/apps2')
runApp('C:/Users/oaona/apps2')
runApp('C:/Users/oaona/apps2')
runApp('C:/Users/oaona/apps2')
runApp('C:/Users/oaona/apps2')
runApp('C:/Users/oaona/apps2')
runApp('C:/Users/oaona/apps2')
runApp()
runApp()
runApp('C:/Users/oaona/apps2')
